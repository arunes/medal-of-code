defmodule MocWeb.ContributorLive.Show do
  import MocWeb.HistoryListComponent
  import MocWeb.CounterListComponent
  import MocWeb.ContributorLive.Components, only: [contribution_calendar: 1]
  import MocWeb.MedalLive.Components, only: [medal_box: 1]
  use MocWeb, :live_view
  alias Moc.Contributors
  alias Moc.Utils

  defp init_mount(nil, socket), do: {:ok, socket |> redirect(to: ~p"/contributors")}

  defp init_mount(contributor, socket) do
    settings = Moc.Instance.get_settings()
    current_contributor_id = socket.assigns.current_user.contributor_id

    contributor_settings = %{
      show_level: settings |> Utils.get_setting_value("contributor.show_level"),
      show_rank: settings |> Utils.get_setting_value("contributor.show_rank"),
      show_affinity: settings |> Utils.get_setting_value("contributor.show_affinity"),
      show_medal_count: settings |> Utils.get_setting_value("contributor.show_medal_count"),
      show_attributes: settings |> Utils.get_setting_value("contributor.show_attributes"),
      show_history: settings |> Utils.get_setting_value("contributor.show_history"),
      show_calendar: settings |> Utils.get_setting_value("contributor.show_calendar"),
      show_counters: settings |> Utils.get_setting_value("contributor.show_counters"),
      show_stats: settings |> Utils.get_setting_value("contributor.show_stats"),
      show_wordcloud: settings |> Utils.get_setting_value("contributor.show_wordcloud")
    }

    show_activity =
      contributor_settings.show_calendar || contributor_settings.show_counters ||
        contributor_settings.show_stats || contributor_settings.show_wordcloud

    socket =
      socket
      |> assign(:page_title, contributor.name)
      |> assign(:current_contributor_id, current_contributor_id)
      |> assign(:contributor, contributor)
      |> assign(:show_activity, show_activity)
      |> assign(:settings, contributor_settings)

    {:ok, socket}
  end

  def mount(%{"id" => contributor_id}, _session, socket) do
    Contributors.get_contributor(contributor_id)
    |> init_mount(socket)
  end

  def render(assigns) do
    ~H"""
    <div class="contributor space-y-12">
      <section class="space-y-6">
        <.header contributor={@contributor} show_rank={@settings.show_rank} />

        <.attributes
          :if={@settings.show_attributes || @contributor.id == @current_contributor_id}
          contributor={@contributor}
        />

        <.progress_bar
          :if={
            @contributor.id == @current_contributor_id || @settings.show_level ||
              @settings.show_affinity
          }
          show_level={@settings.show_level}
          show_affinity={@settings.show_affinity}
          contributor={@contributor}
        />
      </section>

      <.medals contributor_id={@contributor.id} show_medal_count={@settings.show_medal_count} />

      <div :if={@contributor.id == @current_contributor_id || @show_activity}>
        <.title size="xl">Activity</.title>

        <.stats
          :if={@settings.show_stats || @current_contributor_id == @contributor.id}
          class="mb-5"
          contributor_id={@contributor.id}
        />

        <.contribution_calendar
          :if={@settings.show_calendar || @current_contributor_id == @contributor.id}
          class="mb-5"
          id="contribution-calendar"
          contributor_id={@contributor.id}
        />

        <.word_cloud contributor_id={@contributor.id} />
      </div>

      <div :if={@contributor.id == @current_contributor_id || @settings.show_counters}>
        <.title size="xl">Counters</.title>
        <.counter_list contributor_id={@contributor.id} />
      </div>

      <div :if={@contributor.id == @current_contributor_id || @settings.show_history}>
        <.title size="xl">History</.title>
        <.history_list
          number_of_records={10}
          contributor_id={@contributor.id}
          current_contributor_id={@current_contributor_id}
        />
      </div>
    </div>
    """
  end

  def word_cloud(assigns) do
    words = Contributors.get_contributor_words(assigns.contributor_id)
    assigns = assign(assigns, :words, words)

    ~H"""
    <div :if={length(@words) > 10}>
      <moc-wordcloud
        id={"wordcloud-#{@contributor_id}"}
        words={Enum.join(@words, ",")}
        width="100%"
        height="150px"
        phx-update="ignore"
      />
      <p class="mt-2 text-right text-sm italic font-extralight">
        * Generated by most used words in PR comments.
      </p>
    </div>
    """
  end

  def header(assigns) do
    ~H"""
    <div class="flex flex-col items-center">
      <div class="relative inline-flex">
        <.avatar id={@contributor.id} class="mb-2" name={@contributor.name} size={128} />

        <span
          :if={@show_rank}
          class="absolute rank flex items-center justify-center size-10 -top-2 -end-2 rounded-full p-1"
        >
          <span class="font-extrabold text-xl">
            {@contributor.rank}
          </span>
          <sup>{Utils.get_ordinal(@contributor.rank)}</sup>
        </span>
      </div>
      <p class="text-2xl text-center">{@contributor.name}</p>
      <p class="text-sm text-center tagLine">
        {Utils.get_tag_line(
          @contributor.prefix,
          @contributor.title,
          @contributor.number_of_medals,
          @contributor.level
        )}
      </p>
    </div>
    """
  end

  defp attributes(assigns) do
    attributes = [
      %{
        name: "DEX",
        full_name: "Dexterity",
        value: assigns.contributor.dexterity || 0
      },
      %{
        name: "WIS",
        full_name: "Wisdom",
        value: assigns.contributor.wisdom || 0
      },
      %{
        name: "CHA",
        full_name: "Charisma",
        value: assigns.contributor.charisma || 0
      },
      %{
        name: "CON",
        full_name: "Constitution",
        value: assigns.contributor.constitution || 0
      }
    ]

    assigns = assigns |> assign(:attributes, attributes)

    ~H"""
    <div class="mt-2">
      <div class="mx-auto max-w-lg grid grid-cols-4 gap-2">
        <div :for={attr <- @attributes} class="text-center border border-moc-2">
          <p class="bg-moc-2 p-1 text-sm text-moc-2" title={attr.full_name}>
            {attr.name}
          </p>
          <p class="bg-moc p-1">{attr.value}</p>
        </div>
      </div>
    </div>
    """
  end

  def progress_bar(assigns) do
    level_percent =
      get_level_percent(assigns.contributor.xp_needed, assigns.contributor.xp_progress)

    assigns = assigns |> assign(:level_percent, level_percent)

    ~H"""
    <div>
      <div :if={@show_level} class="flex justify-between mb-1">
        <span class="font-medium">
          Level {@contributor.level || 1} {@contributor.prefix} {@contributor.title}
        </span>
        <span :if={@level_percent} class="text-sm font-medium">
          {@level_percent |> Float.floor(2)}%
        </span>
      </div>

      <div
        role="progressbar"
        class="w-full rounded-t-sm h-5 progressBar"
        title={!@contributor.xp_needed && "Max Level"}
        title={
          @contributor.xp_needed &&
            "#{@contributor.xp_needed} xp needed to reach level #{@contributor.level + 1}."
        }
      >
        <div class="h-5 rounded-t-sm" style={"width: #{@level_percent || 100}%"}></div>
      </div>

      <div role="progressbar" class="w-full rounded-b-sm h-1 lightBar">
        <div class="h-1 rounded-b-sm" style={"width: #{@contributor.light_percent}%"}></div>
      </div>
      <div class="mt-1">
        <p class="text-sm font-light">
          Affinity: <span :if={@contributor.light_percent < 50} class="affinity-dark">Dark</span>
          <span :if={@contributor.light_percent > 50} class="affinity-light">Light</span>
          <span :if={@contributor.light_percent == nil || @contributor.light_percent == 50}>
            Neutral
          </span>
        </p>
      </div>
    </div>
    """
  end

  attr :contributor_id, :integer, required: true
  attr :show_medal_count, :boolean, required: true
  attr :class, :string, default: ""

  def medals(assigns) do
    medals = Contributors.get_contributor_medals(assigns.contributor_id)

    assigns = assign(assigns, :medals, medals)

    ~H"""
    <div>
      <.title size="xl">Medals</.title>
      <section class="grid sm:grid-cols-2 md:grid-cols-3 gap-4 h-full">
        <p :if={length(@medals) == 0} class="md:col-span-full text-center">
          Mystery Coder Detected! This brave soul has yet to claim their medals,
          but the saga of code is just beginning. Stay tuned for their epic
          rise!
        </p>

        <.medal_box
          :for={medal <- @medals}
          medal={medal}
          id={"medal-#{medal.id}"}
          show_medal_count={@show_medal_count}
        />
      </section>
    </div>
    """
  end

  attr :contributor_id, :integer, required: true
  attr :class, :string, default: ""

  def stats(assigns) do
    stats = Contributors.get_contributor_stats!(assigns.contributor_id)

    list = [
      %{title: "Total PRs", value: stats.total_prs, is_date: false},
      %{
        title: "First PR date",
        value: stats.first_pr_date || "N/A",
        is_date: stats.first_pr_date != nil
      },
      %{
        title: "Last PR date",
        value: stats.last_pr_date || "N/A",
        is_date: stats.last_pr_date != nil
      },
      %{
        title: "Avg. PR completion",
        value: Utils.get_duration(stats.avg_completion, 2),
        is_date: false
      },
      %{title: "PR per day", value: stats.pr_per_day |> Float.round(3), is_date: false},
      %{
        title: "Total open PR time",
        value: Utils.get_duration(stats.total_time, 2),
        is_date: false
      },
      %{title: "Total comments", value: stats.total_comments, is_date: false},
      %{title: "Total votes", value: stats.total_votes, is_date: false}
    ]

    assigns = assigns |> assign(:stats, list)

    ~H"""
    <section class={["grid gap-4 grid-cols-2 md:grid-cols-4", @class]}>
      <div
        :for={stat <- @stats}
        class="flex flex-col bg-moc-1 justify-center px-2 pt-1 pb-2 rounded-lg text-center h-24"
      >
        <p>
          <sub>{stat.title}</sub>
        </p>
        <p class="text-lg font-bold">
          <.local_datetime :if={stat.is_date} date={stat.value} format="date" />
          <span :if={!stat.is_date}>{stat.value}</span>
        </p>
      </div>
    </section>
    """
  end

  defp get_level_percent(nil, _), do: nil
  defp get_level_percent(xp_needed, xp_progress), do: xp_progress / xp_needed * 100
end
